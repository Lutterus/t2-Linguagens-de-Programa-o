/**
 * generated by Xtext 2.14.0.RC1
 */
package org.example.domainmodel.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.example.domainmodel.domainmodel.Entity;
import org.example.domainmodel.domainmodel.Feature;

@SuppressWarnings("all")
public class DomainmodelGenerator extends AbstractGenerator {
  private List<String> tables = new ArrayList<String>();
  
  private List<String> alterTables = new ArrayList<String>();
  
  private String finals = "";
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  public void valAssign() {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Entity> _filter = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    for (final Entity e : _filter) {
      this.tables.add(e.getName());
    }
    Iterable<Entity> _filter_1 = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    for (final Entity e_1 : _filter_1) {
      String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
      String _plus = (_string + ".java");
      fsa.generateFile(_plus, this.compile(e_1));
    }
    fsa.generateFile(("alterTables" + ".java"), this.prints());
  }
  
  public String prints() {
    for (final String name : this.alterTables) {
      String _finals = this.finals;
      this.finals = (_finals + (name + "\n"));
    }
    return this.finals;
  }
  
  public CharSequence compile(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("CREATE TABLE ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(" (");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("pk");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" INT NOT NULL PRIMARY KEY,");
    _builder.newLineIfNotEmpty();
    {
      EList<Feature> _features = e.getFeatures();
      for(final Feature f : _features) {
        {
          boolean _contains = this.tables.contains(f.getType().getName());
          if (_contains) {
            _builder.append("    ");
            String _name_2 = f.getType().getName();
            String _plus = ("ALTER TABLE " + _name_2);
            String _plus_1 = (_plus + " ADD FOREIGN KEY (fk");
            String _name_3 = e.getName();
            String _plus_2 = (_plus_1 + _name_3);
            String _plus_3 = (_plus_2 + ") REFERENCES ");
            String _name_4 = e.getName();
            String _plus_4 = (_plus_3 + _name_4);
            String _plus_5 = (_plus_4 + "(pk");
            String _name_5 = e.getName();
            String _plus_6 = (_plus_5 + _name_5);
            String _plus_7 = (_plus_6 + ");");
            boolean _add = this.alterTables.add(_plus_7);
            _builder.append(_add, "    ");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("    ");
            CharSequence _compile = this.compile(f);
            _builder.append(_compile, "    ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      Entity _superType = e.getSuperType();
      boolean _tripleNotEquals = (_superType != null);
      if (_tripleNotEquals) {
        _builder.append("\tFOREIGN KEY (fk");
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(e.getSuperType());
        _builder.append(_fullyQualifiedName);
        _builder.append(") REFERENCES ");
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e.getSuperType());
        _builder.append(_fullyQualifiedName_1);
        _builder.append(" (pk");
        QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(e.getSuperType());
        _builder.append(_fullyQualifiedName_2);
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append(");");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Feature f) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = f.getName();
    _builder.append(_name);
    _builder.append(" ");
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
    _builder.append(_fullyQualifiedName);
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
