/*
 * generated by Xtext 2.14.0.RC1
 */
package org.example.domainmodel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.example.domainmodel.domainmodel.Entity
import org.example.domainmodel.domainmodel.Feature
import org.eclipse.xtext.naming.IQualifiedNameProvider

import com.google.inject.Inject
import java.util.ArrayList
import java.lang.reflect.Array
import java.util.List

class DomainmodelGenerator extends AbstractGenerator {
	List<String> tables = new ArrayList<String>();
	List<String> alterTables = new ArrayList<String>();
	String finals = "";
	@Inject extension IQualifiedNameProvider
	
	
	def valAssign() {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(Entity)) {
			tables.add(e.name);
		}
		
		for (e : resource.allContents.toIterable.filter(Entity)) {
			fsa.generateFile(e.fullyQualifiedName.toString("/") + ".java", e.compile)
		}
		fsa.generateFile("alterTables" + ".java", prints());
		
}
	
	def String prints() {		
		for (String name : alterTables) {
			finals += name + "\n"
		}
    	return finals;
	}
	
	

	def compile(Entity e) ''' 
		CREATE TABLE «e.name» (
			pk«e.name» INT NOT NULL PRIMARY KEY,
		    «FOR f : e.features»
		    «IF tables.contains(f.name)==false»
		    «alterTables.add("ALTER TABLE "+f.name+" ADD FOREIGN KEY (fk"+e.name+") REFERENCES "+e.name+"(pk"+e.name+");")»
		    «ELSE»
		    «f.compile»
		    «ENDIF»
		    «ENDFOR»
		«IF e.superType !== null
		»	FOREIGN KEY (fk«e.superType.fullyQualifiedName») REFERENCES «e.superType.fullyQualifiedName» (pk«e.superType.fullyQualifiedName»)«ENDIF»
		);
	'''

	def compile(Feature f) '''
		«f.name» «f.type» «f.s»,
	'''
}
