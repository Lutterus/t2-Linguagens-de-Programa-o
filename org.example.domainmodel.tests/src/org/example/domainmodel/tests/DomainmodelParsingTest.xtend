/*
 * generated by Xtext 2.14.0.RC1
 */
package org.example.domainmodel.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.example.domainmodel.domainmodel.Domainmodel
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.Assert

@ExtendWith(InjectionExtension)
@InjectWith(DomainmodelInjectorProvider)
class DomainmodelParsingTest {
	@Inject
	ParseHelper<Domainmodel> parseHelper

	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			DATABASE name varchar
			
			entity Blog {
			    title: VARCHAR(500)
			    many posts: INT
			}
			 
			entity HasAuthor {
			    author: VARCHAR(1000)
			}
			 
			entity Post extends HasAuthor {
			    title: VARCHAR(1000)
			    content: VARCHAR(1000)
			    many comments: INT
			}
			 
			entity Comment extends HasAuthor {
			    content: VARCHAR(1000)
			}
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}

	@Test
	def void loadModel2() {
		val result = parseHelper.parse('''
			DATABASE name varchar
					
					entity Market {
					    title: VARCHAR(100)
					    many products: INT
					    many employees: INT
					}
					 
					entity HasEmployee {
					    name: VARCHAR(100)
					    salary: NUMBER
					}
					entity Function extends HasEmployee{
						description: VARCHAR(100)
					}
					 
					entity Products {
					    name: VARCHAR(1000)
					    description: VARCHAR(1000)
					    price: NUMBER
					}
					entity Order extends Products{
						id: INT
						many products: INT
					}
			''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}

	@Test
	def void loadModel3() {
		val result = parseHelper.parse('''
			DATABASE name varchar
					
					entity Library {
					    title: VARCHAR(100)
					    many books: INT
					}
					 
					entity Author{
						name: VARCHAR(100)
						age: INT
					}
					entity Book extends Author{
					    name: VARCHAR(100)
					    description: TEXT(150)
					    company: VARCHAR(100)
					}
					entity Loan extends Book{
						id: INT
						day: DATE
						
					}
			''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}

	@Test
	def void loadModel4() {
		val result = parseHelper.parse('''
			DATABASE name varchar
					
					entity Discipline {
					    title: VARCHAR(100)
					    many students: INT
					}
					 
					entity Teacher extends Discipline{
						name: VARCHAR(100)
						age: INT
						specialty: VARCHAR(50)
					}
					entity Student extends Discipline{
						id: INT
						   name: VARCHAR(100)
					}
					entity Note extends Student{
						value: NUMBER
						
					}
			''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
}
